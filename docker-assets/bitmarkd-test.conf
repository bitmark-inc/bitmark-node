# bitmarkd.conf  -*- mode: libucl -*-

# "." is a special case - it uses the path from the configuration file
# as the data directory.  Use ${CURDIR} for working directory.
# all certificates, logs and LevelDB files are relative to this directory
# unless the are overridden with absolute paths.
data_directory = "."

# select the chain of the network for peer connections
# cross chain networking connects will not work
chain = testing

# select the default node configuration
# choose from: none, chain OR sub.domain.tld
nodes = chain

# optional reservoir file if not absolute path then is created relative to
# the data directory
reservoir_file = "data/reservoir.json"
# optional peer file if not absolute path then is created relative to
# the data directory
peer_file = "data/peers.json"

.set(var=BTC_ADDR) "BTC_ADDR:BTC_ADDR:ENV_BTC_ADDR"
.set(var=LTC_ADDR) "LTC_ADDR:LTC_ADDR:ENV_LTC_ADDR"
.default(var=BTC_ADDR) ""
.default(var=LTC_ADDR) ""

.set(var=CONTAINER_IP) "CONTAINER_IP:CONTAINER_IP:ENV_CONTAINER_IP"
.set(var=RPC_CONTAINER_IP) "CONTAINER_IP"
.append(var=RPC_CONTAINER_IP) ":2130"
.set(var=BROADCAST_CONTAINER_IP) "CONTAINER_IP"
.append(var=BROADCAST_CONTAINER_IP) ":2135"
.set(var=LISTEN_CONTAINER_IP) "CONTAINER_IP"
.append(var=LISTEN_CONTAINER_IP) ":2136"

.set(var=PUBLIC_IP) "PUBLIC_IP:PUBLIC_IP:ENV_PUBLIC_IP"
.set(var=RPC_PUBLIC_IP) "PUBLIC_IP"
.append(var=RPC_PUBLIC_IP) ":2130"
.set(var=BROADCAST_PUBLIC_IP) "PUBLIC_IP"
.append(var=BROADCAST_PUBLIC_IP) ":2135"
.set(var=LISTEN_PUBLIC_IP) "PUBLIC_IP"
.append(var=LISTEN_PUBLIC_IP) ":2136"

# Bitmark Vault clients connect using JSON RPC to these listening ports
client_rpc {
  maximum_connections = 100
  listen = "127.0.0.1:2130"
  listen = "${RPC_CONTAINER_IP}"

  # announce certain public IP:ports to network
  announce = "${RPC_PUBLIC_IP}"

  certificate = rpc.crt
  private_key = rpc.key
}

# https connection for rpc services and status requests
https_rpc {
  maximum_connections = 5

  listen = 127.0.0.1:2131

  # IPs that can access the /bitmarkd/* GET APIs
  # default is deny
  allow {
    details = 127.0.0.1
    details = "[::1]"
    connections = 127.0.0.1
    connections = "[::1]"
    peers = 127.0.0.1
    peers = "[::1]"
  }

  certificate = rpc.crt
  private_key = rpc.key
}

# peer-to-peer networking configuration
peering {
  # set false to prevent additional connections
  dynamic_connections = true
  # set to false to only use IPv4 for outgoing connections
  prefer_ipv6 = false
  # for incoming peer connections
  listen = "${LISTEN_CONTAINER_IP}"

  # announce certain public IP:ports to network
  announce = "${LISTEN_PUBLIC_IP}"

  public_key = peer.public
  private_key = peer.private
}

publishing {

  broadcast = 0.0.0.0:2135
  #broadcast = "[::]:2135"

  # ok to use the same keys as peer
  public_key = peer.public
  private_key = peer.private
}

# configuration of recorderd connections
proofing {
  public_key = proof.public
  private_key = proof.private
  signing_key = proof.sign

  # payments for future transfers
  # private keys are just samples for testing
  # (do not include such keys in a real configuration file)
  payment_address {
    # bitcoin = "18RpkvSdJKPni9nqfmKh4d7wBF9Ny5dppv"
    # litecoin = "LPPqFqznuHgke737q67kgVEcaJgu6jo5Bv"
    bitcoin = "${BTC_ADDR}"
    litecoin = "${LTC_ADDR}"
  }

  publish =  "0.0.0.0:2140"
  submit =  "0.0.0.0:2141"
}

# setup for every payment service
payment {
  # set to true to get payment transactions directly from the discovery proxy
  use_discovery = true

  discovery {
    sub_endpoint = coins.test.bitmark.com:16008
    req_endpoint = coins.test.bitmark.com:16009
  }

  # local bitcoin access to REST API
  bitcoin {
    url = http://127.0.0.1:8332/rest
  }

  # local litecoin access to REST API
  litecoin {
    url = http://127.0.0.1:9332/rest
  }

}

# logging configuration
logging {
  size = 1048576
  count = 100

  # set to yes to log to console
  console = no

  # set the logging level for various modules
  # modules not overridden with get the value from DEFAULT
  # the default value for DEFAULT is "critical"
  levels {
    # DEFAULT = info
    DEFAULT = debug
  }
}
