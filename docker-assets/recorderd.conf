local M = {}
local public_ip =  {}
local public_ip_env = os.getenv("PUBLIC_IP")
if  public_ip_env~= nil and public_ip_env ~= "" then
    public_ip[0] = public_ip_env
else
    public_ip[0] = "127.0.0.1"
    public_ip[1] = "[::1]"
end

-- determine use default port or environment variable
function set_port(port)
    if port == "proof_pub_port" then
        local env_proof_pub_port = os.getenv("PROOF_PUB_PORT")
        if env_proof_pub_port ~= nil and env_proof_pub_port ~= "" then
                return env_proof_pub_port
        end
        return "2140"
    end 
    if port == "proof_sub_port" then
        local env_proof_sub_port = os.getenv("PROOF_SUB_PORT")
        if env_proof_sub_port ~= nil and env_proof_sub_port ~= "" then
                return  env_proof_sub_port
        end
        return "2141"
    end 
    return
end

function getLoopback(ip) 
    startindex = string.find(ip, "::")
    if startindex == nil or endindex < 1 then
        return "127.0.0.1:"
    else
           return "127.0.0.1:"
        -- disable ipv6 interface  because it needs a complicate docker configuration
        -- return "[::]:" 
    end    
end


-- helper functions
function read_file(name)
    local f, err = io.open(M.data_directory .. "/" .. name, "r")
    if f == nil then
        return nil
    end
    local r = f:read("*a")
    f:close()
    return r
end

-- set the directory for data and log files
--M.data_directory = arg[0]:match("(.*/)")  -- dir from configuration file
--M.data_directory = "."                    -- current directory
--M.data_directory = "/var/lib/recorderd"   -- absolute path
M.data_directory = "@DATA-DIRECTORY@"

-- optional pid file if not absolute path then is created relative to
-- the data directory
--M.pidfile = "recorderd.pid"

-- select the chain of the network for peer connections
-- cross chain networking connects will not work
M.chain = "bitmark"
--M.chain = "testing"
--M.chain = "local"

-- number of background hashing threads
-- default: number of CPUs
M.threads = 1

-- connect to bitmarkd
M.peering = {
    -- the miners keys
    public_key = read_file("peer.public"),
    private_key = read_file("peer.private"),

    -- connections to bitmarkd nodes
    connect = {
        {
            public_key = "@BITMARKD-PROOF-PUBLIC-KEY@",
            blocks =  getLoopback(public_ip[0])..set_port("proof_pub_port"),
            submit =  getLoopback(public_ip[0])..set_port("proof_sub_port")
            --blocks = "127.0.0.1:2140",
            --submit = "127.0.0.1:2141"
        }
    }
}

-- logging configuration
M.logging = {
    size = 1048576,
    count = 20,

    -- set the logging level for various modules
    -- modules not overridden with get the value from DEFAULT
    -- the default value for DEFAULT is "critical"
    levels = {
        -- DEFAULT = "info",
        DEFAULT = "info",

        -- data
        mode = "info",

        -- other
        main = "info"
    }
}

-- return the complete configuration
return M