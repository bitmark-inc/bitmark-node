-- recorderd.conf  -*- mode: lua -*-

local M = {}

local public_ip =  {}
local public_ip_env = os.getenv("PUBLIC_IP")
if  public_ip_env~= nil or public_ip_env ~= "" then
    public_ip[0] = public_ip_env
else
    public_ip[0] = "127.0.0.1"
end

local proof_pub_port = "2140"
local proof_sub_port = "2141"

function set_env_port() 
    local env_proof_pub_port = os.getenv("PROOF_PUB_PORT")
    if env_proof_pub_port ~= nil and env_proof_pub_port ~= "" then
            proof_pub_port = env_proof_pub_port
    end
    local env_proof_sub_port = os.getenv("PROOF_SUB_PORT")
    if env_proof_sub_port ~= nil and env_proof_sub_port ~= "" then
            proof_sub_port = env_proof_sub_port
    end
    return
end

set_env_port()

function getLoopback(ip) {
    if string.match(str, "::") then
        return "[::1]"
    else
        return "127.0.0.1"
    end    
}

-- helper functions
function read_file(name)
    local f, err = io.open(M.data_directory .. "/" .. name, "r")
    if f == nil then
        return nil
    end
    local r = f:read("*a")
    f:close()
    return r
end

-- set the directory for data and log files
M.data_directory = arg[0]:match("(.*/)")  -- dir from configuration file
--M.data_directory = "."                    -- current directory
--M.data_directory = "/var/lib/recorderd"   -- absolute path

-- optional pid file if not absolute path then is created relative to
-- the data directory
--M.pidfile = "recorderd.pid"

-- select the chain of the network for peer connections
-- cross chain networking connects will not work
M.chain = "bitmark"
--M.chain = "testing"
--M.chain = "local"

-- number of background hashing threads
-- default: number of CPUs
--M.threads = 1

-- connect to bitmarkd
M.peering = {
    -- the miners keys
    public_key = read_file("recorderd.public"),
    private_key = read_file("recorderd.private"),

    -- connections to bitmarkd nodes
    connect = {
        {
            public_key = "b95fb9b64b2287378e2decd68557207229207cbac7165a483ff4a063b1de6c21",
            blocks =  getLoopback(public_ip[0])..proof_pub_port,
            submit = getLoopback(public_ip[0])..proof_sub_port
        }
    }
}

-- logging configuration
M.logging = {
    size = 1048576,
    count = 20,

    -- set the logging level for various modules
    -- modules not overridden with get the value from DEFAULT
    -- the default value for DEFAULT is "critical"
    levels = {
        DEFAULT = "info",
        -- DEFAULT = "debug",

        -- data
        mode = "debug",

        -- other
        main = "debug"
    }
}

-- return the complete configuration
return M
